version: '3.4'

services:
  traefik:
    image: traefik
    container_name: traefik
    ports:
      - "7512:7512"
      - "1883:1883"
    command:
      - --log.level=WARN
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --entrypoints.kuzzle_http.address=:7512
      - --entrypoints.kuzzle_mqtt.address=:1883
    depends_on:
      kuzzle:
        condition: service_healthy
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  kuzzle:
    image: kuzzleio/core-dev:2
    command: node app.js
    volumes:
      - "..:/var/app"
      - "./scripts/run-dev.sh:/run-dev.sh"
      - "./fixtures:/fixtures"
    cap_add:
      - SYS_PTRACE
    ulimits:
      nofile: 65536
    sysctls:
      - net.core.somaxconn=8192
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7512/_healthCheck"]
      timeout: 1s
      interval: 2s
      retries: 30
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      # Kuzzle HTTP/WS
      - "traefik.http.services.kuzzle_http.loadbalancer.server.port=7512"
      - "traefik.http.services.kuzzle_http.loadbalancer.healthCheck.path=/_healthCheck"
      - "traefik.http.services.kuzzle_http.loadbalancer.healthCheck.interval=5s"
      - "traefik.http.routers.kuzzle.entrypoints=kuzzle_http"
      - "traefik.http.routers.kuzzle.rule=Host(`localhost`)"
      - "traefik.http.routers.kuzzle.service=kuzzle_http"
      # Kuzzle MQTT
      - "traefik.tcp.services.kuzzle_mqtt.loadbalancer.server.port=1883"
      - "traefik.tcp.routers.kuzzle.entrypoints=kuzzle_mqtt"
      - "traefik.tcp.routers.kuzzle.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.kuzzle.service=kuzzle_mqtt"
    environment:
      - kuzzle_services__storageEngine__client__node=http://elasticsearch:9200
      - kuzzle_services__storageEngine__commonMapping__dynamic=true
      - kuzzle_services__internalCache__node__host=redis
      - kuzzle_services__memoryStorage__node__host=redis
      - kuzzle_server__protocols__mqtt__enabled=true
      - kuzzle_server__protocols__mqtt__developmentMode=false
      - kuzzle_limits__loginsPerSecond=50
      # - NODE_ENV=${NODE_ENV:-development}
      - NODE_ENV=production
      # - DEBUG=${DEBUG:-kuzzle:*,-kuzzle:network:protocols:websocket,-kuzzle:events}
      - DEBUG=${DEBUG:-kuzzle:cluster:sync}
      - DEBUG_DEPTH=${DEBUG_DEPTH:-0}
      - DEBUG_MAX_ARRAY_LENGTH=${DEBUG_MAX_ARRAY:-100}
      - DEBUG_EXPAND=${DEBUG_EXPAND:-off}
      - DEBUG_SHOW_HIDDEN={$DEBUG_SHOW_HIDDEN:-on}
      - DEBUG_COLORS=${DEBUG_COLORS:-on}

  redis:
    image: redis:6.2.4
    container_name: kuzzle_redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    ports:
      - "6379:6379"

  elasticsearch:
    image: kuzzleio/elasticsearch:7
    container_name: kuzzle_elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 2s
      timeout: 2s
      retries: 10
    ports:
      - "9200:9200"
    ulimits:
      nofile: 65536
