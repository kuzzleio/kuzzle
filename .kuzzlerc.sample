{
  // -------------------------------------------------------------------------
  // Kuzzle configuration sample file
  //
  // You can copy this file to a valid [rc](https://github.com/dominictarr/rc)
  // file location to customize Kuzzle configuration
  // -------------------------------------------------------------------------

  // The HTTP section lets you configure how Kuzzle should handle HTTP requests
  "http": {
    // * accessControlAllowOrigin:
    //    sets the default Access-Control-Allow-Origin HTTP
    //    header used to send responses to the client
    //    (see https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)
    "accessControlAllowOrigin": "*"
  },

  // Kuzzle configured limits
  "limits": {
    // * concurrentRequests:
    //      Number of requests Kuzzle processes simultaneously.
    //      Requests received above this limit are bufferized until a slot is freed
    //      This value should be kept low to avoid overloading Kuzzle's event loop.
    // * documentsFetchCount:
    //      Maximum number of documents that can be fetched by a single API
    //      request.This value cannot exceed 9999 and cannot be higher
    //      than 80% of the requestsBufferSize value
    // * documentsWriteCount:
    //      Maximum number of documents that can be written by a single API
    //      request.This value cannot exceed 9999 and cannot be higher
    //      than 80% of the requestsBufferSize value
    // * requestsBufferSize:
    //      Maximum number of requests that can be bufferized.
    //      Requests received above this limit are discarded with a 503 error
    // * requestsBufferWarningThreshold:
    //      Number of bufferized requests after
    //      which Kuzzle will throw 'core:overload' events
    //      (see http://docs.kuzzle.io/plugin-reference/#core)
    // * requestHistorySize:
    //      Completed API requests history. For debug and support purposes
    // * subscriptionConditionsCount
    //      Maximum number of conditions a subcription filter can contain
    //      NB: A condition is either a "simple" operator (anything but and, or and bool)
    //      or a boolean condition that contains only simple operators.
    "concurrentRequests": 50,
    "documentsFetchCount": 1000,
    "documentsWriteCount": 200,
    "requestsBufferSize": 50000,
    "requestsBufferWarningThreshold": 5000,
    "requestsHistorySize": 50,
    "subscriptionConditionsCount": 16
  },

  // The plugins section lets you define plugins behaviors
  // (see http://kuzzle.io/guide/#plugins)
  "plugins": {
    // [Common]
    //   * workerPrefix:
    //       Process name prefix for plugin workers
    //   * pipeWarnTime:
    //        Warning time threshold (in milliseconds)
    //        on a pipe plugin action
    //   * pipeTimeout:
    //        Maximum execution time (in milliseconds)
    //        of a pipe plugin action
    //   * initTimeout:
    //        Maximum execution time (in milliseconds)
    //        of a plugin initialization
    "common": {
      "workerPrefix": "kpw:",
      "pipeWarnTime": 40,
      "pipeTimeout": 250,
      "initTimeout": 2000
    },

    // The following blocks configure plugins
    "kuzzle-plugin-logger": {
      threads: 1
    }
  },

  // Queue names used by Kuzzle internal communications
  "queues": {
    "remoteActionQueue": "remote-action-queue"
  },

  // The repositories are used internally by Kuzzle to store its data (users,
  // permissions, configuration etc.)
  "repositories": {
    // [Common]
    //   * cacheTTL:
    //      Time to live (in seconds) of cached objects.
    //      Decreasing this value will lower Redis memory and
    //      disk consumption, at the cost of increasing
    //      queries rate to the database and response times
    "common": {
      "cacheTTL": 1440
    }
  },

  // The security section contains the configuration for Kuzzle permissions
  // mechanism
  "security": {
    // [restrictedProfileIds]
    // The profileIds applied to a user created with the API route
    // users/_createRestricted
    "restrictedProfileIds": ["default"],
    // [jwt]
    // configuration for npm
    // [jsonwebtoken package](https://github.com/auth0/node-jsonwebtoken)
    //
    //   * algorithm:
    //      hash/encryption method used to sign the token
    //   * expiresIn:
    //      Token default expiration time
    //      (interpreted by https://www.npmjs.com/package/ms)
    //   * secret:
    //      String or buffer data containing either the secret for HMAC
    //      algorithms, or the PEM encoded private key for RSA and ECDSA.
    //      If left to null (default), Kuzzle will autogenerate a random
    //      seed (can only be used with HMAC algorithms).
    "jwt": {
      "algorithm": "HS256",
      "expiresIn": "1h",
      "secret": null
    },
    // [default]
    // The default role defines permissions for all users,
    // until an administrator configures the backend rights
    // By default, all users are granted all permissions
    "default": {
      "role": {
        "controllers": {
          "*": {
            "actions": {
              "*": true
            }
          }
        }
      }
    },
    // [standard]
    // Permissions used when creating an administrator user, either using the
    // CLI or the Back Office.
    //
    // By default, the admin user is granted all permissions.
    // Anonymous and non-administrator users have their rights restricted
    "standard": {
      "profiles": {
        "admin": {
          "policies": [ {"roleId": "admin"} ]
        },
        "default": {
          "policies": [ {"roleId": "default"} ]
        },
        "anonymous": {
          "policies": [ {"roleId": "anonymous"} ]
        }
      },
      "roles": {
        "admin": {
          "controllers": {
            "*": {
              "actions": {
                "*": true
              }
            }
          }
        },
        "default": {
          "controllers": {
            "auth": {
              "actions": {
                "checkToken": true,
                "getCurrentUser": true,
                "getMyRights": true,
                "logout": true,
                "updateSelf": true
              }
            },
            "server": {
              "actions": {
                "info": true
              }
            }
          }
        },
        "anonymous": {
          "controllers": {
            "auth": {
              "actions": {
                "checkToken": true,
                "getCurrentUser": true,
                "getMyRights": true,
                "login": true
              }
            },
            "server": {
              "actions": {
                "info": true
              }
            }
          }
        }
      }
    }
  },

  // The services are the external components Kuzzle relies on.
  "services": {
    // [common]
    //   * defaultInitTimeout:
    //       Time in ms after which a service is considered
    //       failing if it has not init.
    //   * retryInterval:
    //       Default interval in ms between Kuzzle tries to init
    //       the service again on first failure.
    "common": {
      "defaultInitTimeout": 10000,
      "retryInterval": 1000
    },

    // [internalCache]
    // The cache service relies on Redis
    // sample settings for Redis service (see also https://github.com/luin/ioredis):
    //
    // 1. using a single Redis database:
    //   node:
    //     * host:
    //         The host on which Redis can be reached.
    //         Can take an IP address, an URI or a hostname
    //     * port:
    //         The port on which Redis is running its database:
    //     * (optional) database:
    //         ID of the redis database (default: 0)
    "internalCache": {
      "backend": "redis",
      "node": {
        "host": "localhost",
        "port": 6379
      }
    },
    // 2. using a master/slaves Redis instance with Redis sentinels
    //    (cf. http://redis.io/topics/sentinel):
    //   * node:
    //     * sentinels:
    //         array of sentinels instances:
    //           * host:
    //               Host name/address of the sentinel server
    //               Can be an IP address, an URI or a hostname
    //           * port:
    //               Network port opened by Redis on the sentinel server
    //     * name:
    //         Group of Redis instances composed of a master and one
    //         or more slaves
    //     * (optional) database:
    //         ID of the redis database (default: 0)
    //"internalCache": {
    //  "backend": "redis",
    //  "node": {
    //    "sentinels": [
    //      {"host": "sentinel-host-1", "port": 26379},
    //      {"host": "sentinel-host-2", "port": 26379},
    //      {"host": "sentinel-host-3", "port": 26379}
    //    ],
    //    "name": "kuzzle"
    //  }
    //},
    // 3. using a redis cluster (cf. http://redis.io/topics/cluster-spec):
    //   * nodes: array of master nodes of the cluster
    //     * host:
    //         Host name/address of a redis cluster node
    //         Can be an IP address, an URI or a hostname
    //     * port:
    //        Network port opened by the redis cluster node
    //"internalCache": {
    //  "backend": "redis",
    //  "nodes": [
    //    {"host": "redis-1", "port": 6379},
    //    {"host": "redis-2", "port": 6379},
    //    {"host": "redis-3", "port": 6379}
    //  ]
    //},

    // [memoryStorage]
    // The Redis memoryStorage Engine
    // (see "internalCache" above for sample settings)
    // By default, the memoryStorage engine uses the same redis server
    // than internalCache, on database ID "5"
    "memoryStorage": {
      "backend": "redis",
      "database": 5,
      "node": {
        "host": "localhost",
        "port": 6379
      }
    },

    // [internalBroker]
    // The internalBroker is used for internal Kuzzle communication,
    // notably to transport messages between the CLI and the server.
    //   * host:
    //       Host name of a Kuzzle server. Change this only if you want to use
    //       the CLI from a distant host.
    //   * port:
    //       Network port to open for internal communications
    //   * retryInterval:
    //       Time interval (in millisconds) between reconnections retries
    //       when the connection to the broker server has been lost
    //   * pingTimeout:
    //       Timeout (in milliseconds) of a ping request. If reached, Kuzzle
    //       marks its connection to the distant host as lost.
    //   * pingInterval:
    //       Time (in milliseconds) between ping requests
    "internalBroker": {
      "aliases": ["broker"],
      "host": "localhost",
      "port": 7911,
      "retryInterval": 1000,
      "pingTimeout": 50,
      "pingInterval": 60000
    },
    // [proxyBroker]
    // The proxy broker is used to communicate between the Proxy and Kuzzle
    // server.
    //   * host:
    //       Host name/address of a Kuzzle proxy server.
    //       Can be a hostname, an IP address or an URI.
    //   * port:
    //       Network port opened by the Kuzzle proxy server
    //   * retryInterval:
    //       Time interval (in millisconds) between reconnections retries
    //       when the connection to the broker server has been lost
    //   * pingTimeout:
    //       Timeout (in milliseconds) of a ping request. If reached, Kuzzle
    //       marks its connection to the distant host as lost.
    //   * pingInterval:
    //       Time (in milliseconds) between ping requests
    "proxyBroker": {
      "host": "localhost",
      "port": 7331,
      "retryInterval": 1000,
      "pingTimeout": 50,
      "pingInterval": 60000
    },
    // [db]
    // The database layer is by default relying on Elasticsearch and is
    // currently the only available database layer.
    // sample settings for Elasticsearch service (see also https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/configuration.html):
    // 1. using a single Elasticsearch server:
    //   * host:
    //       Host name/address of a Elasticsearch server.
    //       Can be a hostname, an URI or an IP address.
    //   * port:
    //       Network port opened by the Elasticsearch server
    //   * apiVersion:
    //      The version of Elasticsearch API to use.
    //      Kuzzle currently only supports Elasticsearch API "5.x"
    "db": {
      "backend": "elasticsearch",
      "aliases": ["storageEngine"],
      "host": "elasticsearch",
      "port": 9200,
      "apiVersion": "5.0",
      "defaults": {
        // Number of retries to attempt on an update conflict
        // before throwing an error
        "onUpdateConflictRetries": 0,
        // Time to live of a paginated search
        "scrollTTL": "15s"
      }
    }
    // 2. using a Elasticsearch cluster:
    //   * hosts:
    //         Array of nodes of the cluster.
    //         Each item can be a string representing the hostname,
    //         or an object with any options allowed by ES client
    //         (see https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/host-reference.html)
    //"db": {
    //  "backend": "elasticsearch",
    //  "aliases": ["storageEngine"],
    //  "hosts": [
    //    "http://elastic1:9200",
    //    {"host": "elastic2", port: 9300}
    //  ],
    //  "apiVersion": "5.0",
    //  "defaults": {
    //    // Time to live of a paginated search
    //    "scrollTTL": "15s"
    //  }
    //}
  },

  // Configuration of the Kuzzle's internal statistics module
  //   * ttl:
  //      Time to live (in seconds) of a statistics frame
  //   * statsInterval:
  //      Time (in seconds) between statistics snapshots
  "stats": {
    "ttl": 3600,
    "statsInterval": 10
  },

  // [validation]
  // Defines the specifications used to validate data.
  // Please refer to the guide for more information.
  // (http://docs.kuzzle.io/guide/#data-validation)
  "validation": {
  },

  // [dump]
  // Kuzzle provides diagnostic tools, enabling analysis, support
  // and debugging on unexpected events (errors, crashes)
  // DO NOT disable this feature if you bought enterprise support
  //  * enabled:
  //      Enable/disable informations dump on crash or on errors
  //      (see below)
  //  * history:
  //      * coredump:
  //          Maximum number of core dumps to keep.
  //          Core dumps weight usually between 1 and 2GB,
  //          so make sure you have enough space to store
  //          the provided number of coredumps.
  //      * reports:
  //          Maximum number of reports directories
  //  * path:
  //      Directory path where the dumps are stored
  //  * gcore:
  //      Location of the "gcore" binary
  //  * dateFormat:
  //      Format used to generate dump names
  //      (see http://momentjs.com for formats)
  //  * handledErrors:
  //      Creates a dump whenever an error belonging to the
  //      provided list is generated
  //       * enabled:
  //          Enable/disable dumps on generated errors.
  //          If disabled, dumps will only occur on crashes.
  //       * whitelist:
  //          List of error types triggering a dump
  "dump": {
    "enabled": true,
    "history": {
      "coredump": 3,
      "reports": 10
    },
    "path": "./dump/",
    "gcore": "/usr/bin/gcore",
    "dateFormat": "YYYYMMDD-HHmm",
    "handledErrors": {
      "enabled": true,
      "whitelist": [
        "Error",
        "RangeError",
        "TypeError",
        "KuzzleError",
        "InternalError"
      ]
    }
  }
}
