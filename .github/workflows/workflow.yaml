name: Workflow

on:
  push:
    branches:
      - master
      - 2-dev
  pull_request:

env:
  NODE_LTS_MAINTENANCE_VERSION: "16"
  NODE_LTS_ACTIVE_VERSION: "18"
  NODE_LTS_CURRENT_VERSION: "20" # Stand for the latest LTS version
  DOCKER_PLATFORMS: "linux/amd64,linux/arm64"

jobs:
  prepare-matrix:
    name: Forge Node LTS Matrix
    runs-on: ubuntu-latest
    steps:
      - id: set-matrix
        run: |
          echo "matrix={\"node-version\": [\"$NODE_LTS_MAINTENANCE_VERSION\", \"$NODE_LTS_ACTIVE_VERSION\"]}" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      node_lts_maintenance_version: ${{ env.NODE_LTS_MAINTENANCE_VERSION }}
      node_lts_active_version: ${{ env.NODE_LTS_ACTIVE_VERSION }}
      node_lts_current_version: ${{ env.NODE_LTS_CURRENT_VERSION }}
      docker_platforms: ${{ env.DOCKER_PLATFORMS }}

  error-codes-check:
    name: Documentation - Error codes check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Install additional libraries
        uses: ./.github/actions/install-packages

      - name: Setup Node version ${{ env.NODE_LTS_ACTIVE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_LTS_ACTIVE_VERSION }}
          cache: "npm"

      - name: Install depedencies
        run: npm ci

      - name: Test error codes
        run: ./.ci/scripts/check-error-codes-documentation.sh

  lint:
    name: Lint - Node.js LTS ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    needs: [prepare-matrix]
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.prepare-matrix.outputs.matrix).node-version }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Install additional libraries
        uses: ./.github/actions/install-packages

      - name: Setup Node version ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Run ESlint
        uses: ./.github/actions/es-lint

  unit-tests:
    name: Unit Tests
    needs: [lint, prepare-matrix]
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.prepare-matrix.outputs.matrix).node-version }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Install additional libraries
        uses: ./.github/actions/install-packages

      - name: Setup Node version ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Run unit test using Node ${{ matrix.node-version }}
        uses: ./.github/actions/unit-tests
        env:
          NODE_VERSION: ${{ matrix.node-version }}

  # -----------------------------------------------------------------------------
  # E2E Tests: Functional tests, Monkey tests, Docker image tests
  # -----------------------------------------------------------------------------

  build-and-run-kuzzle:
    needs: [unit-tests, prepare-matrix]
    name: Build and Run ${{ matrix.kuzzle-image }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.prepare-matrix.outputs.matrix).node-version }}
        kuzzle-image: ["kuzzle"]
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Install additional libraries
        uses: ./.github/actions/install-packages

      - name: Setup Node version ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Test to run Kuzzle image
        uses: ./.github/actions/build-and-run-kuzzle
        with:
          KUZZLE_IMAGE: ${{ matrix.kuzzle-image }}

  functional-tests:
    name: Functional Tests - ${{ matrix.test_set }} - Node.js v${{ matrix.node-version }}
    needs: [unit-tests, prepare-matrix]
    strategy:
      matrix:
        test_set:
          [
            jest,
            http,
            websocket,
            "legacy:mqtt",
            "legacy:http",
            "legacy:websocket",
          ]
        node-version: ${{ fromJson(needs.prepare-matrix.outputs.matrix).node-version }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Install additional libraries
        uses: ./.github/actions/install-packages

      - name: Setup Node version ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Run functional test suit ${{ matrix.test_set }}
        uses: ./.github/actions/functional-tests
        with:
          test-set: test:functional:${{ matrix.test_set }}
          node-version: ${{ matrix.node-version }}
        env:
          REBUILD: "true"

  cluster-monkey-tests:
    name: Cluster Monkey Tests
    needs: [functional-tests, build-and-run-kuzzle, prepare-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.prepare-matrix.outputs.matrix).node-version }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Install additional libraries
        uses: ./.github/actions/install-packages

      - name: Cloning Monkey Tester
        uses: actions/checkout@v3
        with:
          repository: kuzzleio/kuzzle-monkey-tests
          path: "kuzzle-monkey-tests"

      - name: Setup Node version ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Run monkey testing tests suit
        uses: ./.github/actions/monkey-tests
        with:
          node-version: ${{ matrix.node-version }}
        env:
          REBUILD: "true"

  deploy-workflow:
    name: Deployment Workflow
    needs: [cluster-monkey-tests, prepare-matrix]
    uses: ./.github/workflows/workflow-deployments.yaml
    secrets: inherit
    with:
      node_lts_maintenance_version: ${{ needs.prepare-matrix.outputs.node_lts_maintenance_version }}
      node_lts_active_version: ${{ needs.prepare-matrix.outputs.node_lts_active_version }}
      node_lts_current_version: ${{ needs.prepare-matrix.outputs.node_lts_current_version }}
      docker_platforms: ${{ needs.prepare-matrix.outputs.docker_platforms }}
