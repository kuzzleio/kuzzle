name: Main branches push checks

on:
  push:
    branches:
      - master

env:
  NODE_LTS_MAINTENANCE_VERSION: "lts/fermium"
  NODE_LTS_CURRENT_VERSION: "lts/gallium"
  NODE_LTS_ACTIVE_VERSION: "lts/*"  # The latest LTS version

jobs:
  prepare-matrix:
    name: Forge Node LTS Matrix
    runs-on: ubuntu-latest
    steps:
      - id: set-matrix
        run: |
          echo "::set-output name=matrix::{\"node-version\": [\"$NODE_LTS_MAINTENANCE_VERSION\", \"$NODE_LTS_CURRENT_VERSION\", \"$NODE_LTS_ACTIVE_VERSION\"]}"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [prepare-matrix]
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.prepare-matrix.outputs.matrix).node-version }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-packages
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - uses: ./.github/actions/cache-node-modules
        with:
          NODE_VERSION: ${{ matrix.node-version }}
      - uses: ./.github/actions/es-lint

  build-and-run-kuzzle:
    needs: [unit-tests, prepare-matrix]
    name: Build and Run ${{ matrix.kuzzle-image }} - Node.js v${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.prepare-matrix.outputs.matrix).node-version }}
        kuzzle-image: ["kuzzle"]
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-packages
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - uses: ./.github/actions/cache-node-modules
        with:
          NODE_VERSION: ${{ matrix.node-version }}
      - uses: ./.github/actions/build-and-run-kuzzle
        with:
          KUZZLE_IMAGE: ${{ matrix.kuzzle-image }}

  unit-tests:
    name: Unit Tests - Node.js v${{ matrix.node-version }}
    needs: [lint, prepare-matrix]
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.prepare-matrix.outputs.matrix).node-version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-packages
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - uses: ./.github/actions/cache-node-modules
        with:
          NODE_VERSION: ${{ matrix.node-version }}
      - uses: ./.github/actions/unit-tests

  functional-tests-legacy:
    name: Functional Tests Legacy - ${{ matrix.test_set }} - Node.js v${{ matrix.node-version }}
    needs: [unit-tests, prepare-matrix]
    strategy:
      matrix:
        test_set: [http, websocket, mqtt]
        node-version: ${{ fromJson(needs.prepare-matrix.outputs.matrix).node-version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - uses: ./.github/actions/cache-node-modules
        with:
          NODE_VERSION: ${{ matrix.node-version }}
      - uses: ./.github/actions/functional-tests
        with:
          test-set: test:functional:legacy:${{ matrix.test_set }}
          node-version: ${{ matrix.node-version }}

  functional-tests:
    name: Functional Tests - ${{ matrix.test_set }} - Node.js v${{ matrix.node-version }}
    needs: [unit-tests, prepare-matrix]
    strategy:
      matrix:
        test_set: [http, websocket]
        node-version: ${{ fromJson(needs.prepare-matrix.outputs.matrix).node-version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-packages
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - uses: ./.github/actions/cache-node-modules
        with:
          NODE_VERSION: ${{ matrix.node-version }}
      - uses: ./.github/actions/functional-tests
        with:
          test-set: test:functional:${{ matrix.test_set }}
          node-version: ${{ matrix.node-version }}

  cluster-monkey-tests:
    name: Cluster Monkey Tests
    needs: [functional-tests-legacy, functional-tests, build-and-run-kuzzle, prepare-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.prepare-matrix.outputs.matrix).node-version }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-packages
      - name: Cloning Monkey Tester
        uses: actions/checkout@v2
        with:
          repository: kuzzleio/kuzzle-monkey-tests
          path: "kuzzle-monkey-tests"
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - uses: ./.github/actions/cache-node-modules
        with:
          NODE_VERSION: ${{ matrix.node-version }}
      - uses: ./.github/actions/monkey-tests
        with:
          node-version: ${{ matrix.node-version }}

  error-codes-check:
    name: Documentation - Error codes check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-packages
      - run: npm install
      - name: Test error codes
        run: ./.ci/scripts/check-error-codes-documentation.sh

  doc-deploy:
    name: Deployment Doc to Prod
    runs-on: ubuntu-latest
    needs: [cluster-monkey-tests]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: ./.github/actions/install-packages
      - name: Extract references from context
        shell: bash
        id: extract-refs
        run: |
          echo "::set-output name=version::$(git describe --abbrev=0 --tags | cut -d. -f 1)"
          echo "::set-output name=repo::$(echo $GITHUB_REPOSITORY | cut -d/ -f 2)"
          echo "::set-output name=branch::$(echo $GITHUB_REF | cut -d/ -f 3)"
      - uses: convictional/trigger-workflow-and-wait@v1.3.0
        with:
          owner: kuzzleio
          repo: documentation
          github_token: ${{ secrets.ACCESS_TOKEN_CI }}
          workflow_file_name: child_repo.workflow.yml
          ref: master
          inputs: '{"repo_name": "${{ steps.extract-refs.outputs.repo }}", "branch": "${{ steps.extract-refs.outputs.branch }}", "version": "${{ steps.extract-refs.outputs.version }}"}'

  dockerhub-deploy:
    name: Build and deploy images to Dockerhub
    needs: [functional-tests-legacy, functional-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-packages
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_LTS_ACTIVE_VERSION }}
      - name: Get branch name
        # Github expose branch name with this format '/ref/branch/branchName'
        # So we need to extract the wanted part (branchName)
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - uses: ./.github/actions/dockerhub
        with:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          BRANCH: ${{ steps.extract_branch.outputs.branch }}

  npm-deploy:
    name: Build and deploy release on NPM.js
    needs: [functional-tests-legacy, functional-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/install-packages
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_LTS_ACTIVE_VERSION }}
          registry-url: "https://registry.npmjs.org"
      - run: npm install
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
