#!/usr/bin/env node

/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2020 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

const net = require('net');

const sleep = seconds => new Promise(resolve => setTimeout(() => resolve(), seconds * 1000))

const kuzzleHost = process.env.KUZZLE_HOST || 'localhost';
const kuzzlePort = process.env.KUZZLE_PORT || 7512;
const maxTries = process.env.MAX_TRIES || 60;

let client = null;

function tryConnect (host, port) {
  return new Promise(resolve => {
    client = new net.Socket();

    client.on('error', () => resolve(false));

    client.connect(port, host, () => resolve(true));
  });
}

async function waitKuzzle (host, port, maxTries) {
  const spinner = '|/-\\';
  let i = 0;
  let seconds = 0;

  console.log(`[ℹ] Trying to connect to Kuzzle at "${kuzzleHost}:${kuzzlePort}"`);

  while (seconds < maxTries) {
    const connected = await tryConnect(host, port);

    if (connected) {
      console.log(`[✔] Kuzzle is up`);

      return;
    }

    process.stdout.write(`[${spinner.charAt(i)}] Still trying to connect to Kuzzle (${seconds}s)...`);
    process.stdout.write('\r');

    await sleep(1);

    i = i === 3 ? 0 : i + 1;
    seconds++;
  }

  console.log(`Timeout after ${seconds}s: cannot connect to Kuzzle at "${kuzzleHost}:${kuzzlePort}"`);
  process.exit(1);
}

const run = async () => {
  try {
    await waitKuzzle(kuzzleHost, kuzzlePort, maxTries);
  }
  catch (error) {
    console.error(`[x] ${error.message}`);
    process.exit(1);
  }
  finally {
    if (client) {
      client.unref();
    }
  }
};

if (require.main === module) {
  run();
}

module.exports = waitKuzzle;
