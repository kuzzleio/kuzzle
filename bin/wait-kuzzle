#!/usr/bin/env node

/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2020 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

/* eslint-disable no-console */

const { Kuzzle, WebSocket } = require('kuzzle-sdk');

const sleep = seconds => {
  return new Promise(resolve => setTimeout(() => resolve(), seconds * 1000));
};

const kuzzleHost = process.env.KUZZLE_HOST || 'localhost';
const kuzzlePort = process.env.KUZZLE_PORT || 7512;
const maxTries = process.env.MAX_TRIES || 60;

async function waitKuzzle (host, port, timeout) {
  const spinner = '|/-\\';
  const protocol = new WebSocket(host, { port });
  const kuzzle = new Kuzzle(protocol);
  let connected = false;

  kuzzle.on('connected', () => (connected = true));
  kuzzle.connect().catch(() => {});

  console.log(`[ℹ] Trying to connect to Kuzzle at "${kuzzleHost}:${kuzzlePort}"`);

  for (let seconds = 0; seconds < timeout; seconds++) {
    const message = `[${spinner.charAt(seconds % spinner.length)}] Still trying to connect to Kuzzle (${seconds}s)...`;

    if (connected) {
      console.log(`${' '.repeat(message.length)}\r[✔] Kuzzle is up`);
      kuzzle.disconnect();
      return;
    }

    process.stdout.write(`${message}\r`);

    await sleep(1);
  }

  console.log(`Timeout after ${timeout}s: cannot connect to Kuzzle at "${host}:${port}"`);
  process.exit(1);
}

const run = async () => {
  try {
    await waitKuzzle(kuzzleHost, kuzzlePort, maxTries);
  }
  catch (error) {
    console.error(`[x] ${error.message}`);
    process.exit(1);
  }
};

if (require.main === module) {
  run();
}

module.exports = waitKuzzle;
