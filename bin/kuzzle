#!/usr/bin/env node

/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2018 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const semver = require('semver');

function requireCommand(commandName) {
  let requiredModule;

  if (semver.satisfies(process.version, '>= 8.0.0')) {
    requiredModule = require(`./commands/${commandName}`);
  } else {
    // node6 compatible commands are one level deeper
    requiredModule = require(`./commands/node6/${commandName}`);
  }

  return requiredModule;
}

/**
 * This is the main entry when you type kuzzle start command
 *
 * If you want to run a Kuzzle instance using PM2,
 * take a look at the app-start.js file instead
 */
const program = require('commander');

program.version(require('../package.json').version).usage('[command] --help');

const bindOption = cmd =>
  cmd
    .option('-p, --port <port>', 'Kuzzle port number', parseInt)
    .option('-h, --host <host>', 'Kuzzle host')
    .option('-U, --username <username>', 'Admin username')
    .option('-P, --password <password>', 'Admin password')
    .option('-d, --debug', 'make errors more verbose')
    .option('-C, --noColors', 'do not use ANSI coloring');

// $ kuzzle createFirstAdmin
bindOption(
  program
    .command('createFirstAdmin')
    .description('create the first administrator user')
    .action(requireCommand('createFirstAdmin'))
);

// $ kuzzle clearCache
bindOption(
  program
    .command('clearCache')
    .description('clear internal caches in Redis')
    .action(requireCommand('clearCache'))
);

// $ kuzzle reset
bindOption(
  program
    .command('reset')
    .description(
      'reset all users, profiles, roles and documents validation specifications'
    )
    .option('--noint', 'non interactive mode')
    .action(requireCommand('resetKuzzleData'))
);

// $ kuzzle resetSecurity
bindOption(
  program
    .command('resetSecurity')
    .description('reset all users, profiles and roles')
    .option('--noint', 'non interactive mode')
    .action(requireCommand('resetSecurity'))
);

// $ kuzzle resetDatabase
bindOption(
  program
    .command('resetDatabase')
    .description('remove all data stored on Kuzzle')
    .option('--noint', 'non interactive mode')
    .action(requireCommand('resetDatabase'))
);

// $ kuzzle shutdown
bindOption(
  program
    .command('shutdown')
    .description('gracefully exits after processing remaining requests')
    .action(requireCommand('shutdown'))
);

// $ kuzzle start
bindOption(
  program
    .command('start')
    .description('start a Kuzzle instance')
    .option('    --fixtures <file>', 'import data from file')
    .option('    --mappings <file>', 'apply mappings from file')
    .option('    --securities <file>', 'import roles, profiles and users from file')
    .option('    --vault-key <vaultKey>', 'Vault key used to decrypt secrets')
    .option('    --secrets-file <secretsFile>', 'Output file to write decrypted secrets')
    .action(requireCommand('start'))
);

// $ kuzzle dump
bindOption(
  program
    .command('dump')
    .description('create a dump of current state of kuzzle')
    .action(requireCommand('dump'))
);

// $ kuzzle loadMappings
bindOption(
  program
    .command('loadMappings <file>')
    .description('load database mappings into Kuzzle')
    .action(requireCommand('loadMappings'))
);

// $ kuzzle loadFixtures
bindOption(
  program
    .command('loadFixtures <file>')
    .description('load database fixtures into Kuzzle')
    .action(requireCommand('loadFixtures'))
);

// $ kuzzle loadSecurities
bindOption(
  program
    .command('loadSecurities <file>')
    .description('load roles, profiles and users into Kuzzle')
    .action(requireCommand('loadSecurities'))
);

// $ kuzzle encryptSecrets
bindOption(
  program
    .command('encryptSecrets [file]')
    .option('    --vault-key <vaultKey>', 'Vault key used to encrypt secrets')
    .option('    --outputFile <outputFile>', 'Output file to write encrypted secrets')
    .option('    --noint', 'non interactive mode')
    .description('encrypt a secrets file with the provided key')
    .action(requireCommand('encryptSecrets'))
);

// $ kuzzle decryptSecrets
bindOption(
  program
    .command('decryptSecrets [file]')
    .option('    --vault-key <vaultKey>', 'Vault key used to decrypt secrets')
    .option('    --outputFile <outputFile>', 'Output file to write decrypted secrets')
    .option('    --noint', 'non interactive mode')
    .description('decrypt a secrets file with the provided key')
    .action(requireCommand('decryptSecrets'))
);

// $ kuzzle indexDump
bindOption(
  program
    .command('indexDump <index> <path>')
    .option('    --batch-size <batchSize>', 'Maximum batch size (see limits.documentsFetchCount config)')
    .description('dump an entire index in the specified directory')
    .action(requireCommand('indexDump'))
);

// $ kuzzle indexRestore
bindOption(
  program
  .command('indexRestore <path>')
  .option('    --batch-size <batchSize>', 'Maximum batch size (see limits.documentsWriteCount config)')
  .description('restore the content of a previously dumped index')
  .action(requireCommand('indexRestore'))
);

// Run user command
program.parse(process.argv);

/*
  Workaround for a bug in commander: program.args.length is empty if a sub-command is executed with
  a flag as the last option before an argument.
  For instance: "kuzzle install -a plugin" will incorrectly trigger the help and exit

  This is still true with commander v2.2
 */
if (program.rawArgs.length <= 2) {
  program.help();
}
