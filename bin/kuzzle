#!/usr/bin/env node

/**
 * This is the main entry when you type kuzzle start command
 *
 * If you want to run a Kuzzle instance using PM2,
 * take a look at the app-start.js file instead
 */
var program = require('commander');

program
  .version(require('../package.json').version)
  .option('-d, --debug', 'make errors more verbose')
  .option('-C, --noColors', 'do not use ANSI coloring');

// $ kuzzle createFirstAdmin
program
  .command('createFirstAdmin')
  .description('create the first administrator user')
  .action(require('./commands/createFirstAdmin'));

// $ kuzzle clearCache
program
  .command('clearCache')
  .description('clear internal caches in Redis')
  .action(require('./commands/clearCache'));

// $ kuzzle likeAvirgin
program
  .command('likeAvirgin')
  .description('delete Kuzzle configuration and users from database. Makes Kuzzle look like a virgin, touched for the very first time')
  .option('--fixtures <fixtures>', 'import some fixtures from file')
  .option('--mappings <mappings>', 'load and apply mappings from file')
  .option('--noint', 'non interractive mode, will perform the reset immediately')
  .action(require('./commands/reset'));

// $ kuzzle plugins
program
  .command('plugins')
  .arguments('[name]')
  .description('manage plugins')
  .option('    --list', 'list currently installed plugins')
  .option('    --install', 'if plugin [name] is provided, install it from --version, --url or --path, otherwise, (re-)install all listed plugins')
  .option('    --remove', 'removes plugin [name] from Kuzzle')
  .option('    --activate', 'mark the plugin as "activated" (Kuzzle ignores deactivated plugins)')
  .option('    --deactivate', 'mark the plugin as "deactivated" (Kuzzle ignores deactivated plugins)')
  .option('    --importConfig <file>', 'import a configuration from a file for a given plugin')
  .option('    --get', 'get plugin [name] configuration stored in Kuzzle')
  .option('    --set <JSONObject>', 'merge current plugin configuration with JSONObject')
  .option('    --unset <property>', 'unset property from the plugin configuration')
  .option('    --replace <JSONObject>', 'erase the plugin configuration and apply JSONObject instead')
  .option('-v, --packageVersion <version>', 'install plugin <version> from npm')
  .option('-u, --url <url>', 'install plugin from a git repository or a remote tarball')
  .option('-p, --path <path>', 'install plugin from the file system')
  .action(require('./commands/plugins'));

// $ kuzzle start
program
  .command('start')
  .description('start a Kuzzle instance')
  .option('-p, --port <port>', 'Kuzzle port number', parseInt)
  .option('    --likeAvirgin', 'delete Kuzzle configuration and users from database')
  .option('    --fixtures <fixtures>', 'import some fixtures from file')
  .option('    --mappings <mappings>', 'load and apply mappings from file')
  .action(require('./commands/start'));

// Run user command
program.parse(process.argv);

/*
  Workaround for a bug in commander: program.args.length is empty if a sub-command is executed with
  a flag as the last option before an argument.
  For instance: "kuzzle install -a plugin" will incorrectly trigger the help and exit

  This is still true with commander v2.2
 */
if (program.rawArgs.length <= 2) {
  program.help();
}
