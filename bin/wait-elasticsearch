#!/usr/bin/env node

/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2020 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

const yargs = require('yargs');
const { Client: ESClient } = require('@elastic/elasticsearch');

const Kuzzle = require('../lib/kuzzle');

const sleep = seconds => new Promise(resolve => setTimeout(() => resolve(), seconds * 1000))

async function waitForEs (maxSeconds = 120) {
  const kuzzle = new Kuzzle();
  const esConfig = kuzzle.config.services.storageEngine;
  const client = new ESClient(esConfig.client);
  const spinner = '|/-\\';
  let i = 0;
  let seconds = 0;

  console.log(`[ℹ] Trying to connect to Elasticsearch at "${esConfig.client.node}"`);

  while (seconds <= maxSeconds) {
    try {
      // Wait for all shards to be initialized
      await client.cluster.health({ wait_for_no_initializing_shards: true });

      console.log(`[✔] Elasticsearch is ready`);

      return;
    }
    catch (e) {}

    process.stdout.write(`[${spinner.charAt(i)}] Still trying to connect to Elasticsearch (${seconds}s)...`);
    process.stdout.write('\r');

    i = i === 3 ? 0 : i + 1;
    seconds++;

    await sleep(1);
  }

  throw new Error(`Timeout after ${seconds}s: cannot connect to Elasticsearch at "${esConfig.node}"`);
}

const options = yargs
  .usage('wait-elasticsearch [options]')
  .describe('timeout', 'Max timeout')
  .argv;

const run = async () => {
  try {
    await waitForEs(options.timeout);
  }
  catch (error) {
    console.error(`[x] ${error.message}`);
    process.exit(1);
  }
};

if (require.main === module) {
  run();
}

module.exports = waitForEs;
