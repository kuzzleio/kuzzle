jobs:
  include:

# ---------------------------------------
# Unit Tests & Linters
# ---------------------------------------

    - stage: "Unit Tests & Linters"
      if: type = pull_request OR (type = push AND branch =~ ^master|.*-dev|.*-stable$) OR type = cron
      name: "Unit Tests & ESLint"
      os: linux
      sudo: required
      language: node_js

      node_js:
        - "8"

      install:
        - npm install --silent
        - npm install --silent --only=dev

      script:
        - npm run --silent lint
        - npm run unit-testing

      after_script:
        - npm run codecov

    - stage: "Unit Tests & Linters"
      if: (type = pull_request AND fork != true) OR (type = push AND branch =~ ^master|.*-dev|.*-stable$) OR type = cron
      name: "SonarQube"

      os: linux
      sudo: required
      language: node_js

      node_js:
        - "8"

      addons:
        sonarqube: true

      cache:
        directories: 
          - $HOME/.sonar/cache

      env:
        # SonarQube Token
        secure: KWhqHGlzE1ioGyZzcWxoTdhJdSnXvORHIZXvHC7WRdnOLa14gTdRkdjezzVT2DIeHcqH5x5uffAaWHgXWYPzqgm64XpR86UAcQeqf5FxF7V91M0jIaBlktzTK7Xf8PGozh0hqJqD4lTcG4hLW99a/dI0Z/LULape5dNBZWHKGwk6XjYY7rQErtSw1l4jrZD2w6xEVjXQSckwFVnbF5whoYiwOJwYzyNnfrY6NNWHtTwzSKmdK1DUQr6Vk+eA+ggndWXe2GA3bJGM9K4lNbG/TcTLUTULOfkqwoZVejOrd5dpuNZqa/iRPubtVuFUZ0W0+DFGl8KBctdkbhqI4qk27uQPIVQO7zF36hR1oaQuSNXyXwWOVtVm3+ymu1YAfzjVUTiRBHg5Uda0Ink8yLo8Wpnp0gRq5Y3iVhymMYbiKHuzs52tnHfZ6NFjIH1M86uZhzrJhCqFKKCX9dzguj1PrM+7zYC0aXIxi3Yt6k1C2DY/8A+g201tBhMB7EwppilH6Rm2sqBXpUKI/P/LW/lJOUmY4EGBOPv+RGX0W3Av28NTI0PisCiNKgD8w5r+4l16/AhMBY3lmvTjZFd6IpfcJohWA25k2h7b4Opemu7/po7faMGMhqUTW64D98YhqiWtR0QpVtIRnLiol4GbwwUjT83p1Nw+korROXsei5ygX/w=

      install:
        - npm install --silent --only=dev

      script:
        - bash .ci/sonar.sh

# ---------------------------------------
# Integration tests
# ---------------------------------------

    - stage: "Integration tests"
      if: (type = push AND branch =~ ^master|.*-stable$) OR type = cron
      name: "Node.js 6"

      os: linux
      sudo: required
      language: minimal
      services: docker

      cache:
        directories:
          - $HOME/.pm2 

      env:
        - DOCKER_COMPOSE_VERSION=1.9.0
        - NODE_LTS=6
        - DOCKER_PROXY_TAG=$(if [ "${TRAVIS_BRANCH}" != "master" ]; then echo ":develop"; fi)

      before_install:
        - sudo sysctl -w vm.max_map_count=262144

      script:
        - docker-compose -f .ci/test.yml run kuzzle

    - stage: "Integration tests"
      if: (type = push AND branch =~ ^master|.*-dev|.*-stable$) OR type = cron
      name: "Node.js 8"

      os: linux
      sudo: required
      language: minimal
      services: docker

      cache:
        directories:
          - $HOME/.pm2 

      env:
        - DOCKER_COMPOSE_VERSION=1.9.0
        - NODE_LTS=8
        - DOCKER_PROXY_TAG=$(if [ "${TRAVIS_BRANCH}" != "master" ]; then echo ":develop"; fi)

      before_install:
        - sudo sysctl -w vm.max_map_count=262144

      script:
        - docker-compose -f .ci/test.yml run kuzzle

# ---------------------------------------
# Cross-plateform tests
# ---------------------------------------

    - stage: "Cross-plateform tests"
      name: "Linux ARMHF"

      if: type = cron

      os: linux
      sudo: required
      language: minimal
      services: docker

      cache:
        directories:
          - $HOME/.pm2 

      env:
        - DOCKER_COMPOSE_VERSION=1.9.0
        - NODE_LTS=8
        - DOCKER_PROXY_TAG=$(if [ "${TRAVIS_BRANCH}" != "master" ]; then echo ":develop"; fi)

      before_install:
        - sudo sysctl -w vm.max_map_count=262144
        - docker run --rm --privileged multiarch/qemu-user-static:register

      script:
        - docker run --rm -it -v "$(pwd)":/mnt kuzzleio/sdk-cross:node8-armhf ./.ci/scripts/install-armhf-deps.sh
        - docker-compose -f .ci/test-armhf.yml run kuzzle

    - stage: "Cross-plateform tests"
      if: type = cron
      name: "Linux ARM64"

      os: linux
      sudo: required
      language: minimal
      services: docker

      cache:
        directories:
          - $HOME/.pm2 

      env:
        - DOCKER_COMPOSE_VERSION=1.9.0
        - NODE_LTS=8
        - DOCKER_PROXY_TAG=$(if [ "${TRAVIS_BRANCH}" != "master" ]; then echo ":develop"; fi)

      before_install:
        - sudo sysctl -w vm.max_map_count=262144
        - docker run --rm --privileged multiarch/qemu-user-static:register

      script:
        - docker run --rm -it -v "$(pwd)":/mnt kuzzleio/sdk-cross:node8-aarch64 ./.ci/scripts/install-aarch64-deps.sh
        - docker-compose -f .ci/test-aarch64.yml run kuzzle

# ---------------------------------------
# Redis Tests
# ---------------------------------------

    - stage: "Redis tests"
      if: type = cron
      name: "Redis 3"

      os: linux
      sudo: required
      language: minimal
      services: docker

      cache:
        directories:
          - $HOME/.pm2 

      env:
        - DOCKER_COMPOSE_VERSION=1.9.0
        - NODE_LTS=8
        - REDIS_VERSION=3.2
        - DOCKER_PROXY_TAG=$(if [ "${TRAVIS_BRANCH}" != "master" ]; then echo ":develop"; fi)

      before_install:
        - sudo sysctl -w vm.max_map_count=262144

      script:
        - docker-compose -f .ci/test.yml run kuzzle

    - stage: "Redis old versions tests"
      if: type = cron
      name: "Redis 4"

      os: linux
      sudo: required
      language: minimal
      services: docker

      cache:
        directories:
          - $HOME/.pm2 

      env:
        - DOCKER_COMPOSE_VERSION=1.9.0
        - NODE_LTS=8
        - REDIS_VERSION=4.0.14
        - DOCKER_PROXY_TAG=$(if [ "${TRAVIS_BRANCH}" != "master" ]; then echo ":develop"; fi)

      before_install:
        - sudo sysctl -w vm.max_map_count=262144

      script:
        - docker-compose -f .ci/test.yml run kuzzle

# ---------------------------------------
# Deployments
# ---------------------------------------

    - stage: "Deployments"
      if: tag IS present AND type != cron
      name: "NPM.js"

      os: linux
      sudo: required
      language: minimal

      script:
        - echo "Deploying Kuzzle on NPM"

      deploy:
        provider: npm
        email: support@kuzzle.io
        api_key:
          secure: gqLBt1Scnr8wAR0zauW3jI7M576Jr7d+d2C5gvCA+iI1Y6gBWMM04A3w1MHHcPUBNA+xbwNimyoxbrBozq7otiMEDbP5ConS+T3KRWyHYwjdSfmL5KmEoNqwjmo128qJq2uWFxEecBmBk63q9A3gbnhdw3/D+05NKL4B44PpyNDpT6fApsVyDNXQmeib6cYfjwB1rCv8Mcf2sbVE1eqcJuGTwDtxx/860405PqBSg7H8iGGJJr7cymaU8cK4RLre+u8GHRiSDoKeU1UiWIoIoLG0y8TisFllSstZu9kguA6ShPJJA28NLiNyJ7j0KxKW6muvY03AFxa4XQ0sMaxotjQxN3IRUnLdN1mnQydWqMRP2+HWK1uRXCiDoL9ZnSClS1BixSAv15tvhggqE76Rq4uGCcl7hYfagpUzQpsUIV40Wc7CHez/O4ZvvicWIOdo2jmh/6fRYWOFY2+ihzwszaZwAQT1cdTm75JMIqrATyNWEZvwvczQzC85HmJajhf1azyEY08kdIJxwmwh30AMl2Is0vlq9ujCp8XRsanbdj74CcDNf9RSgesiD83McLd/ZJZHSDIe//wNypcTcW4fQbSfGb1oDHWVLQ6L/jr+W3OJUgVBG31mMciGo2jSROOos8n4iHHqs3QbxTwh0B+t+1amvZlpelFUEoicprPCcN8=
        on:
          repo: kuzzleio/kuzzle
          branch: master
          tags: true

    - stage: "Deployments"
      if: type = push AND branch =~ ^master|.*-dev|.*-stable$ 
      name: "Dockerhub"

      os: linux
      sudo: required
      language: minimal
      services: docker

      script:
        - MODE=production bash build-docker-images.sh

# ---------------------------------------
# Notifications
# ---------------------------------------
notifications:
  slack:
    rooms:
    - secure: "MlWnTEJwmn4Wq6sH2PRfrLRPhwIiqPUNB9AuulKKXheTfY74zHvlCe0TAUM5x8IaccJT4GKG7tnpLU4ujzNyL4AbqzCkUjZvaq2+NT1YJ4xJ2AXe4NDjuj8Cr0GyeotJA6FMHLAyDtGbVvuomktUp49pL7+QbG5kcUMtZ2wQ1swfWlk9zf8xH4lpO7Nyd96xXj7fpZaWGM06VCloJ45wxLmvUOEY5nDEoZ0LyOFyH8zx4WuNZH7jkp0JFQwiuFp+VpyPhnynBcMyyUi7rlrJxfqD3XfffQ0foE1TH2S5TuWZ3IuMjZUaxZ0xNA42hVfmvPLGppLoNNuaL1rPsVHSvSNWkdAKbFQDhi/O3PskOFKiMzXkPgSFNY4CyHiCVI78s3Gi1qWK9StD/Pzu1vs7mWFh7ysQeDZnrK1sz/IDA/sZPfF4ZK6ZKCYqGOZtH3wuc8AsGcyrgigT1cRxlXUblI8z0Phu1D3gCETCpqrcngT6cxlpy/PnBm3upLE1dfN/1OzBP+wwGgblLmAN47O5HsA4R76VNR6gJ55A5hwdGmLqe4Vc0yUE5EC88OfnSZ3YHSqNTjF7gko4hsoRNqPZBon7WX0HQwo0SjO8HyzW+kOVzMcTt6Csbdt1j96Jo/AqQNrl4HNXLXdRJzQAsSUtlUSe4UPS5GIKHQns0Cffvls="
    on_success: never
    on_failure: always
